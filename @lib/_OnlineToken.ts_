import { Signer } from 'ethers';
import { DeployerState, EthereumAddress, EthereumNetwork, Token, TokenAddresses } from '@types';
import { ContractProxy } from '@lib/ContractProxy';
import { Deployer } from '@lib/Deployer';
import { InvalidStateError } from '@lib/errors';
import { ContractArtifacts } from '@lib/ContractArtifacts';
import { contracts } from 'contracts';

export class OnlineToken {
  private readonly _signer: Signer;
  private readonly _contractProxy: ContractProxy;
  private _token: Token;

  private networkId: EthereumNetwork;

  private _deployer: Deployer;

  async deploy() {
    if (!this.owner) {
      throw new InvalidStateError('Cannot deploy without owner. Forgot to call setup()?');
    }
    await this.deployer.deploy(this.token, this.owner);
  }

  get token(): Token {
    return this._token;
  }

  get signer(): Signer {
    return this._signer;
  }

  get contractProxy(): ContractProxy {
    return this._contractProxy;
  }

  get addresses(): TokenAddresses {
    return this.deployer.addresses;
  }

  set addresses(addresses: TokenAddresses) {
    this.deployer.addresses = addresses;
  }

  get deployer(): Deployer {
    return this._deployer;
  }

  private getContractArtifacts(contractName: string): ContractArtifacts {
    const artifacts = new ContractArtifacts(contracts[contractName], this.networkId);
    if (this.contractAddresses[contractName]) {
      console.log(`using explicit address for ${contractName}: ${this.contractAddresses[contractName]}`);
      artifacts.address = this.contractAddresses[contractName];
    }
    return artifacts;
  }
}
